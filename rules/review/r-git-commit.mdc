---
description: 
globs: 
alwaysApply: false
---
# Git 提交流程

# 步骤一
进行 Code Review，若遇到 git 命令分页的情况，请加上`| cat`，分析是存在以下几种级别的问题：

## 严重
- 分析是否包含敏感信息，如密码、密钥、证书等

## 警告
- 分析是否有破坏性的代码改动，如有则需要全部列举出来
- 分析是否有明显的性能问题，进行说明并给出优化建议

## 提醒
- 分析本次代码改动的影响范围，以简洁的语言进行描述
- 分析代码是否已经格式化

# 步骤二

## 提交信息格式

提交信息应遵循以下格式：

```
<type>(<scope>): <subject>

<body>

<footer>
```

提交信息涉及换行时使用多个 -m 参数提交，如：
```
git commit -m "feat(auth): 添加用户登录功能" -m "实现了基于 JWT 的用户登录认证功能：" -m "- 添加登录接口" -m "- 实现 token 生成和验证" -m "- 添加用户信息缓存" -m "Closes #123"
```

### Type 类型

必须是以下类型之一：

- feat: 新功能（feature）
- fix: 修复 bug
- docs: 文档变更
- style: 代码格式调整，不影响代码逻辑
- refactor: 重构代码，不修复 bug 也不添加新功能
- perf: 性能优化
- test: 添加或修改测试代码
- chore: 构建过程或辅助工具的变动
- revert: 回滚之前的提交

### Scope 范围

可选的提交范围，用于说明提交影响的范围，例如：

- cli.admin: App配置后台服务
- cli.agent: App配置网关服务
- dev.admin: 开发配置后台服务

### Subject 主题

- 用简短的语言描述本次提交的主要内容
- 不超过 50 个字符
- 以动词开头，使用第一人称现在时
- 第一个字母小写
- 结尾不加句号

### Body 正文

- 对本次提交的详细描述
- 可以分成多行
- 说明代码变动的动机，以及与以前行为的对比

### Footer 页脚

- 用于关联 Issue 或破坏性变更说明
- Breaking Changes 必须以 `BREAKING CHANGE:` 开头
- 关联 Issue 使用 `Closes #123, #456`

## 示例

```
feat(auth): 添加用户登录功能

实现了基于 JWT 的用户登录认证功能：
- 添加登录接口
- 实现 token 生成和验证
- 添加用户信息缓存

Closes #123
```

```
fix(api): 修复用户查询接口返回错误

修复了当用户不存在时返回 500 错误的问题，
现在会正确返回 404 状态码。

Closes #456
```

