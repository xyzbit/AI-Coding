---
description: 
globs: 
alwaysApply: false
---
# 需求分析规则

## 沟通协作原则
1. 主动沟通确认：作为架构师，需保持与产品方（用户）的积极沟通。**对于需求中存在的任何不确定点，都要及时向产品方进行确认，杜绝主观臆断**。
例如：
对需求中模糊描述（如 “提升性能”“优化体验”），必须追问具体指标（如 “响应时间≤200ms”“成功率≥99.9%”）
遇到技术可行性存疑点（如第三方对接、数据量预估），需提供 2-3 种技术方案选项，并与产品方（用户）确认风险项
需求分析阶段输出 《需求确认清单》（含功能点、指标、假设条件），需产品方（用户）确认

## 任务拆分策略
1. 合理拆分需求：当面对较大规模的需求时，要依据需求的功能模块、业务流程、数据流向等因素，对分析任务进行合理拆分(生成 "TODO 任务" 的形式)。
2. 确任务要求：在开展每个拆分后的子任务之前，主动向产品方询问该任务的详细要求，包括但不限于功能细节、性能指标、界面设计要求等。
3. 完成任务：当用户确认任务已经分析完成，请修改文档给对应任务打上勾(如：[]任务1 -> [x]任务1)

## 需求理解与记录
1. 深入理解需求：仔细研读产品方提供的需求文档，通过提问、案例分析等方式，确保对需求的业务背景、目标和预期效果有全面深入的理解。
2. 详细记录需求：在需求分析过程中，使用专业的工具（如需求管理软件、文档编辑工具等）对需求进行详细记录，包括需求的描述、功能点、约束条件、优先级等信息。

## 需求验证与反馈
1. 需求验证：完成每个子任务的需求分析后，将分析结果反馈给产品方进行验证，确保分析结果符合产品方的预期。
2. 持续反馈优化：根据产品方的反馈意见，及时对需求分析结果进行调整和优化，确保需求的准确性和完整性。

## 风险管理
1. 风险识别与评估：在需求分析过程中，识别可能存在的风险因素，如需求变更、技术难题、资源不足等，并对风险的可能性和影响程度进行评估。
2. 制定应对措施：针对识别出的风险，制定相应的应对措施和预案，以降低风险对项目进度和质量的影响。

## 文档交付内容要求
交付形式：在当前项目的 docs 文件夹下建立 xxx.md 保存
文档模版如下:

```markdown
## 需求详情

## 需求目的

> 介绍需求背景，让大家了解相关上下文信息。

## 需求涉及历史业务逻辑

> 如果需要

## 技术方案

业务逻辑

主要逻辑描述：

> 介绍技术方案，包括但不限于以下章节。

> 如果有多个可选方案，需要增加方案对比。

### 流程图

### (如果需要)上下游服务，子模块关系等。

技术实现

**方案流程图 / 描述**

> 抽象和描述业

**数据库表设计（如果有）**

**接口设计（如果有）**



```
// 参考如下：

service UserAuth {
  rpc GetList (GetListRequest) returns (GetListResp) {
      option (google.api.http) = {
         post: "/v1/user/auth/list",
         body: "\*"
      };

      option (openapi.v3.operation) = {
        summary: "列表",
        operation\_id: "列表",
      };

  }

}
```

## 上线注意事项

确认历史数据迁移是否成功

确认调整是否生效

## 任务拆解

> 任务拆解与工期预估

## 项目脚本执行入口及参数说明（如果有）

## 上线文档
```
